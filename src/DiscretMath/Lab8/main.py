def get_max_vertex(k, V, S):
    m = 0  # наименьшее допустимое значение
    v = -1
    for i, w in enumerate(V[k]):
        if i in S:
            continue

        if w[2] == 1:  # движение по стрелке
            if m < w[0]:
                m = w[0]
                v = i
        else:  # движение против стрелки
            if m < w[1]:
                m = w[1]
                v = i

    return v


def get_max_flow_edge(f, T):
    for i in range(len(T)):
        if T[i][0] == f:
            return T[i][2], T[i][1]


def get_max_flow(T):
    w = [x[0] for x in T]
    return min(*w)


def updateV(V, T, f):
    for t in T:
        if t[1] == -1:  # это исток
            continue

        sgn = V[t[2]][t[1]][2]  # направление движения

        # меняем веса в таблице для (i,j) и (j,i)
        V[t[1]][t[2]][0] -= f * sgn
        V[t[1]][t[2]][1] += f * sgn

        V[t[2]][t[1]][0] -= f * sgn
        V[t[2]][t[1]][1] += f * sgn


V = [
    [[0, 0, 1], [15, 0, 1], [30, 0, 1], [15, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1]],   # 0
    [[15, 0, -1], [0, 0, 1], [16, 0, -1], [0, 0, 1], [11, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1]],  # 1
    [[30, 0, -1], [16, 0, 1], [0, 0, 1], [15, 0, -1], [15, 0, 1], [10, 0, -1], [0, 0, 1], [15, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1]],    # 2
    [[15, 0, -1], [0, 0, 1], [15, 0, 1], [0, 0, 1], [0, 0, 1], [10, 0, 1], [0, 0, 1], [0, 0, 1], [20, 0, 1], [0, 0, 1], [0, 0, 1]],     # 3
    [[0, 0, 1], [11, 0, -1], [15, 0, -1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [25, 0, 1], [10, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1]],   # 4
    [[0, 0, 1], [0, 0, 1], [10, 0, 1], [10, 0, -1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [13, 0, -1], [0, 0, 1], [0, 0, 1], [0, 0, 1]],  # 5
    [[0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [25, 0, -1], [0, 0, 1], [0, 0, 1], [10, 0, -1], [0, 0, 1], [0, 0, 1], [10, 0, 1]],     # 6
    [[0, 0, 1], [0, 0, 1], [15, 0, 1], [0, 0, 1], [10, 0, -1], [13, 0, 1], [10, 0, 1], [0, 0, 1], [12, 0, -1], [10, 0, 1], [14, 0, 1]],   # 7
    [[0, 0, 1], [0, 0, 1], [0, 0, 1], [20, 0, -1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [12, 0, 1], [0, 0, 1], [10, 0, 1], [0, 0, 1]],   # 8
    [[0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [10, 0, -1], [10, 0, -1], [0, 0, 1], [10, 0, 1]],   # 9
    [[0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [10, 0, -1], [14, 0, -1], [0, 0, 1], [10, 0, -1], [0, 0, 1]],   # 10
]
V2 = [
    [[0, 0, 1], [105, 0, 1], [300, 0, 1], [105, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1]],   # 0
    [[105, 0, -1], [0, 0, 1], [106, 0, -1], [0, 0, 1], [101, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1]],  # 1
    [[300, 0, -1], [106, 0, 1], [0, 0, 1], [159, 0, -1], [150, 0, 1], [1000, 0, -1], [0, 0, 1], [500, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1]],    # 2
    [[105, 0, -1], [0, 0, 1], [159, 0, 1], [0, 0, 1], [0, 0, 1], [667, 0, 1], [0, 0, 1], [0, 0, 1], [500, 0, 1], [0, 0, 1], [0, 0, 1]],     # 3
    [[0, 0, 1], [101, 0, -1], [150, 0, -1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [259, 0, 1], [910, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1]],   # 4

    [[0, 0, 1], [0, 0, 1], [1000, 0, 1], [259, 0, -1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [13, 0, -1], [0, 0, 1], [0, 0, 1], [0, 0, 1]],  # 5
    [[0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [259, 0, -1], [0, 0, 1], [0, 0, 1], [10, 0, -1], [0, 0, 1], [0, 0, 1], [10, 0, 1]],     # 6
    [[0, 0, 1], [0, 0, 1], [500, 0, 1], [0, 0, 1], [910, 0, -1], [13, 0, 1], [10, 0, 1], [0, 0, 1], [12, 0, -1], [10, 0, 1], [14, 0, 1]],   # 7
    [[0, 0, 1], [0, 0, 1], [0, 0, 1], [500, 0, -1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [12, 0, 1], [0, 0, 1], [10, 0, 1], [0, 0, 1]],   # 8
    [[0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [10, 0, -1], [10, 0, -1], [0, 0, 1], [10, 0, 1]],   # 9
    [[0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1], [10, 0, -1], [14, 0, -1], [0, 0, 1], [10, 0, -1], [0, 0, 1]],   # 10
]

N = len(V)  # число вершин в графе
init = 0  # вершина истока (нумерация с нуля)
end = 10  # вершина стока
Tinit = (float('inf'), -1, init)  # первая метка маршруто (a, from, vertex)
f = []  # максимальные потоки найденных маршрутов
edges = []

j = init
while j != -1:
    k = init  # стартовая вершина (нумерация с нуля)
    T = [Tinit]  # метки маршрута
    S = {init}  # множество просмотренных вершин

    while k != end:  # пока не дошли до стока
        j = get_max_vertex(k, V, S)  # выбираем вершину с наибольшей пропускной способностью
        if j == -1:  # если следующих вершин нет
            if k == init:  # и мы на истоке, то
                break  # завершаем поиск маршрутов
            else:  # иначе, переходим к предыдущей вершине
                k = T.pop()[2]
                continue

        c = V[k][j][0] if V[k][j][2] == 1 else V[k][j][1]  # определяем текущий поток
        T.append((c, j, k))  # добавляем метку маршрута
        S.add(j)  # запоминаем вершину как просмотренную

        if j == end:  # если дошди до стока
            f.append(get_max_flow(T))  # находим максимальную пропускную способность маршрута
            # print(f, T)
            edges.append(get_max_flow_edge(f[-1], T))
            updateV(V, T, f[-1])  # обновляем веса дуг
            break

        k = j

del (edges[1])
del (edges[2])
F = sum(f)
print(f"Макс поток равен: {F}, \nМин разрез: {edges}")
# s = 0
# p = 1
# d = 2
# a = 3
# k = 4
# c = 5
# b = 6
# t = 7
# m = 8
# l = 9
# e = 10
